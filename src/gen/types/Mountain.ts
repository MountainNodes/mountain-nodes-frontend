/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface MountainInterface extends utils.Interface {
  functions: {
    "_isBlacklisted(address)": FunctionFragment;
    "_isWhitelisted(address)": FunctionFragment;
    "accountNodes(address,uint256)": FunctionFragment;
    "addTokensToRewardPool(uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blacklistMalicious(address,bool)": FunctionFragment;
    "calculateRewards(uint256)": FunctionFragment;
    "claimAllRewards()": FunctionFragment;
    "claimFee()": FunctionFragment;
    "claimMinTime()": FunctionFragment;
    "claimRewards(uint256)": FunctionFragment;
    "convertPresaleToReal()": FunctionFragment;
    "createExclusiveNode()": FunctionFragment;
    "createNodeAndTransferToPools(uint256,uint256,bytes20)": FunctionFragment;
    "dailyBoost()": FunctionFragment;
    "dailyReward(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "endSellFeeTimestamp()": FunctionFragment;
    "getNodePrice(uint256)": FunctionFragment;
    "getNumberOfNodes(address)": FunctionFragment;
    "getReferralCode(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialAdditionnalSellFee()": FunctionFragment;
    "isNodeOwner(address)": FunctionFragment;
    "launchSellFeeTimestamp()": FunctionFragment;
    "liquidityFee()": FunctionFragment;
    "lpPool()": FunctionFragment;
    "name()": FunctionFragment;
    "nodeCreationEnabled()": FunctionFragment;
    "nodeMapping(uint256)": FunctionFragment;
    "nodePrice(uint256)": FunctionFragment;
    "nodeRewardEnabled()": FunctionFragment;
    "numberOfNodes()": FunctionFragment;
    "openTrading()": FunctionFragment;
    "owner()": FunctionFragment;
    "referral_bonus()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardFee()": FunctionFragment;
    "rewardPool()": FunctionFragment;
    "rewardSwapRatio()": FunctionFragment;
    "sellFee()": FunctionFragment;
    "setClaimTime(uint128)": FunctionFragment;
    "setIsPool(address,bool)": FunctionFragment;
    "setNodeCreation(bool)": FunctionFragment;
    "setNodePrice(uint256,uint256,uint256)": FunctionFragment;
    "setPresaleToken(address)": FunctionFragment;
    "setRewardPerNode(uint256,uint256,uint256)": FunctionFragment;
    "setSwapTokensAmount(uint256)": FunctionFragment;
    "swapTokensAmount()": FunctionFragment;
    "swapping()": FunctionFragment;
    "symbol()": FunctionFragment;
    "teamFee()": FunctionFragment;
    "teamPool()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "traderJoePair()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFee()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryFee()": FunctionFragment;
    "treasuryPool()": FunctionFragment;
    "updateClaimFee(uint32)": FunctionFragment;
    "updateLiquidityWallet(address)": FunctionFragment;
    "updateMaxTx(uint256)": FunctionFragment;
    "updateMaxWallet(uint256)": FunctionFragment;
    "updateMultiswapFee(uint32,uint32,uint32,uint32)": FunctionFragment;
    "updateRewardSwapRatio(uint32)": FunctionFragment;
    "updateRewardWallet(address)": FunctionFragment;
    "updateSellFee(uint32)": FunctionFragment;
    "updateTeamyWallet(address)": FunctionFragment;
    "updateTransferFee(uint32)": FunctionFragment;
    "updateTreasuryWallet(address)": FunctionFragment;
    "whitelistUser(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_isBlacklisted"
      | "_isWhitelisted"
      | "accountNodes"
      | "addTokensToRewardPool"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "blacklistMalicious"
      | "calculateRewards"
      | "claimAllRewards"
      | "claimFee"
      | "claimMinTime"
      | "claimRewards"
      | "convertPresaleToReal"
      | "createExclusiveNode"
      | "createNodeAndTransferToPools"
      | "dailyBoost"
      | "dailyReward"
      | "decimals"
      | "decreaseAllowance"
      | "endSellFeeTimestamp"
      | "getNodePrice"
      | "getNumberOfNodes"
      | "getReferralCode"
      | "increaseAllowance"
      | "initialAdditionnalSellFee"
      | "isNodeOwner"
      | "launchSellFeeTimestamp"
      | "liquidityFee"
      | "lpPool"
      | "name"
      | "nodeCreationEnabled"
      | "nodeMapping"
      | "nodePrice"
      | "nodeRewardEnabled"
      | "numberOfNodes"
      | "openTrading"
      | "owner"
      | "referral_bonus"
      | "renounceOwnership"
      | "rewardFee"
      | "rewardPool"
      | "rewardSwapRatio"
      | "sellFee"
      | "setClaimTime"
      | "setIsPool"
      | "setNodeCreation"
      | "setNodePrice"
      | "setPresaleToken"
      | "setRewardPerNode"
      | "setSwapTokensAmount"
      | "swapTokensAmount"
      | "swapping"
      | "symbol"
      | "teamFee"
      | "teamPool"
      | "totalSupply"
      | "traderJoePair"
      | "transfer"
      | "transferFee"
      | "transferFrom"
      | "transferOwnership"
      | "treasuryFee"
      | "treasuryPool"
      | "updateClaimFee"
      | "updateLiquidityWallet"
      | "updateMaxTx"
      | "updateMaxWallet"
      | "updateMultiswapFee"
      | "updateRewardSwapRatio"
      | "updateRewardWallet"
      | "updateSellFee"
      | "updateTeamyWallet"
      | "updateTransferFee"
      | "updateTreasuryWallet"
      | "whitelistUser"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_isBlacklisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_isWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "accountNodes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokensToRewardPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blacklistMalicious",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimMinTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertPresaleToReal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createExclusiveNode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createNodeAndTransferToPools",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyBoost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endSellFeeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNodePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfNodes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralCode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialAdditionnalSellFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isNodeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "launchSellFeeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpPool", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nodeCreationEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nodeMapping",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nodePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeRewardEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openTrading",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referral_bonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewardFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSwapRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sellFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setClaimTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsPool",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setNodeCreation",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setNodePrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPresaleToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPerNode",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapTokensAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "swapping", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "teamFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "teamPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "traderJoePair",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaimFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidityWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxTx",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxWallet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMultiswapFee",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardSwapRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSellFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTeamyWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTransferFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasuryWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistUser",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "_isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokensToRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistMalicious",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAllRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimMinTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertPresaleToReal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createExclusiveNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNodeAndTransferToPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dailyBoost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dailyReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endSellFeeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNodePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialAdditionnalSellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNodeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchSellFeeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nodeCreationEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodeMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nodePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nodeRewardEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referral_bonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardSwapRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setIsPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNodeCreation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNodePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPresaleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPerNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapTokensAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapping", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "teamFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "teamPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "traderJoePair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaimFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidityWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMultiswapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardSwapRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSellFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTeamyWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTransferFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasuryWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistUser",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SwapAndLiquify(uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapAndLiquify"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SwapAndLiquifyEventObject {
  otherHalf: BigNumber;
  newBalance: BigNumber;
}
export type SwapAndLiquifyEvent = TypedEvent<
  [BigNumber, BigNumber],
  SwapAndLiquifyEventObject
>;

export type SwapAndLiquifyEventFilter = TypedEventFilter<SwapAndLiquifyEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Mountain extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MountainInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    _isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    accountNodes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addTokensToRewardPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    blacklistMalicious(
      account: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateRewards(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimAllRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimFee(overrides?: CallOverrides): Promise<[number]>;

    claimMinTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimRewards(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    convertPresaleToReal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createExclusiveNode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNodeAndTransferToPools(
      amount: BigNumberish,
      nodeType: BigNumberish,
      referral_code: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dailyBoost(overrides?: CallOverrides): Promise<[BigNumber]>;

    dailyReward(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endSellFeeTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNodePrice(
      node_type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumberOfNodes(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReferralCode(user: string, overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialAdditionnalSellFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    isNodeOwner(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    launchSellFeeTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityFee(overrides?: CallOverrides): Promise<[number]>;

    lpPool(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nodeCreationEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    nodeMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        id: BigNumber;
        timestamp: BigNumber;
        nodeType: BigNumber;
        owner: string;
      }
    >;

    nodePrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nodeRewardEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    numberOfNodes(overrides?: CallOverrides): Promise<[BigNumber]>;

    openTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    referral_bonus(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardFee(overrides?: CallOverrides): Promise<[number]>;

    rewardPool(overrides?: CallOverrides): Promise<[string]>;

    rewardSwapRatio(overrides?: CallOverrides): Promise<[number]>;

    sellFee(overrides?: CallOverrides): Promise<[number]>;

    setClaimTime(
      newTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIsPool(
      account: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNodeCreation(
      enableNodeCreation: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNodePrice(
      Ice: BigNumberish,
      Earth: BigNumberish,
      Lava: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPresaleToken(
      _presaleToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardPerNode(
      Ice: BigNumberish,
      Earth: BigNumberish,
      Lava: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapTokensAmount(
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapTokensAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapping(overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    teamFee(overrides?: CallOverrides): Promise<[number]>;

    teamPool(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    traderJoePair(overrides?: CallOverrides): Promise<[string]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFee(overrides?: CallOverrides): Promise<[number]>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryFee(overrides?: CallOverrides): Promise<[number]>;

    treasuryPool(overrides?: CallOverrides): Promise<[string]>;

    updateClaimFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLiquidityWallet(
      walletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxTx(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMaxWallet(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMultiswapFee(
      _rewardFee: BigNumberish,
      _treasuryFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _teamFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewardSwapRatio(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewardWallet(
      walletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSellFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTeamyWallet(
      walletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTransferFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTreasuryWallet(
      walletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistUser(
      account: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  _isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  accountNodes(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addTokensToRewardPool(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  blacklistMalicious(
    account: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateRewards(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimAllRewards(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimFee(overrides?: CallOverrides): Promise<number>;

  claimMinTime(overrides?: CallOverrides): Promise<BigNumber>;

  claimRewards(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  convertPresaleToReal(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createExclusiveNode(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNodeAndTransferToPools(
    amount: BigNumberish,
    nodeType: BigNumberish,
    referral_code: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dailyBoost(overrides?: CallOverrides): Promise<BigNumber>;

  dailyReward(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endSellFeeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  getNodePrice(
    node_type: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumberOfNodes(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReferralCode(user: string, overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialAdditionnalSellFee(overrides?: CallOverrides): Promise<BigNumber>;

  isNodeOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

  launchSellFeeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityFee(overrides?: CallOverrides): Promise<number>;

  lpPool(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  nodeCreationEnabled(overrides?: CallOverrides): Promise<boolean>;

  nodeMapping(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string] & {
      id: BigNumber;
      timestamp: BigNumber;
      nodeType: BigNumber;
      owner: string;
    }
  >;

  nodePrice(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  nodeRewardEnabled(overrides?: CallOverrides): Promise<boolean>;

  numberOfNodes(overrides?: CallOverrides): Promise<BigNumber>;

  openTrading(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  referral_bonus(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardFee(overrides?: CallOverrides): Promise<number>;

  rewardPool(overrides?: CallOverrides): Promise<string>;

  rewardSwapRatio(overrides?: CallOverrides): Promise<number>;

  sellFee(overrides?: CallOverrides): Promise<number>;

  setClaimTime(
    newTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIsPool(
    account: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNodeCreation(
    enableNodeCreation: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNodePrice(
    Ice: BigNumberish,
    Earth: BigNumberish,
    Lava: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPresaleToken(
    _presaleToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardPerNode(
    Ice: BigNumberish,
    Earth: BigNumberish,
    Lava: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapTokensAmount(
    newVal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

  swapping(overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  teamFee(overrides?: CallOverrides): Promise<number>;

  teamPool(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  traderJoePair(overrides?: CallOverrides): Promise<string>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFee(overrides?: CallOverrides): Promise<number>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryFee(overrides?: CallOverrides): Promise<number>;

  treasuryPool(overrides?: CallOverrides): Promise<string>;

  updateClaimFee(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLiquidityWallet(
    walletAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxTx(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMaxWallet(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMultiswapFee(
    _rewardFee: BigNumberish,
    _treasuryFee: BigNumberish,
    _liquidityFee: BigNumberish,
    _teamFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewardSwapRatio(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewardWallet(
    walletAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSellFee(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTeamyWallet(
    walletAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTransferFee(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTreasuryWallet(
    walletAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistUser(
    account: string,
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    _isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    accountNodes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addTokensToRewardPool(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistMalicious(
      account: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateRewards(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAllRewards(overrides?: CallOverrides): Promise<void>;

    claimFee(overrides?: CallOverrides): Promise<number>;

    claimMinTime(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    convertPresaleToReal(overrides?: CallOverrides): Promise<void>;

    createExclusiveNode(overrides?: CallOverrides): Promise<void>;

    createNodeAndTransferToPools(
      amount: BigNumberish,
      nodeType: BigNumberish,
      referral_code: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    dailyBoost(overrides?: CallOverrides): Promise<BigNumber>;

    dailyReward(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    endSellFeeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getNodePrice(
      node_type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfNodes(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferralCode(user: string, overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialAdditionnalSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    isNodeOwner(account: string, overrides?: CallOverrides): Promise<boolean>;

    launchSellFeeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityFee(overrides?: CallOverrides): Promise<number>;

    lpPool(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    nodeCreationEnabled(overrides?: CallOverrides): Promise<boolean>;

    nodeMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string] & {
        id: BigNumber;
        timestamp: BigNumber;
        nodeType: BigNumber;
        owner: string;
      }
    >;

    nodePrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeRewardEnabled(overrides?: CallOverrides): Promise<boolean>;

    numberOfNodes(overrides?: CallOverrides): Promise<BigNumber>;

    openTrading(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    referral_bonus(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardFee(overrides?: CallOverrides): Promise<number>;

    rewardPool(overrides?: CallOverrides): Promise<string>;

    rewardSwapRatio(overrides?: CallOverrides): Promise<number>;

    sellFee(overrides?: CallOverrides): Promise<number>;

    setClaimTime(
      newTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsPool(
      account: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setNodeCreation(
      enableNodeCreation: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setNodePrice(
      Ice: BigNumberish,
      Earth: BigNumberish,
      Lava: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPresaleToken(
      _presaleToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardPerNode(
      Ice: BigNumberish,
      Earth: BigNumberish,
      Lava: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapTokensAmount(
      newVal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

    swapping(overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    teamFee(overrides?: CallOverrides): Promise<number>;

    teamPool(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    traderJoePair(overrides?: CallOverrides): Promise<string>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFee(overrides?: CallOverrides): Promise<number>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryFee(overrides?: CallOverrides): Promise<number>;

    treasuryPool(overrides?: CallOverrides): Promise<string>;

    updateClaimFee(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLiquidityWallet(
      walletAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxTx(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateMaxWallet(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMultiswapFee(
      _rewardFee: BigNumberish,
      _treasuryFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _teamFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardSwapRatio(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardWallet(
      walletAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSellFee(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTeamyWallet(
      walletAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTransferFee(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTreasuryWallet(
      walletAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistUser(
      account: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SwapAndLiquify(uint256,uint256)"(
      otherHalf?: null,
      newBalance?: null
    ): SwapAndLiquifyEventFilter;
    SwapAndLiquify(
      otherHalf?: null,
      newBalance?: null
    ): SwapAndLiquifyEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    _isBlacklisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _isWhitelisted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    accountNodes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addTokensToRewardPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistMalicious(
      account: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateRewards(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAllRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimFee(overrides?: CallOverrides): Promise<BigNumber>;

    claimMinTime(overrides?: CallOverrides): Promise<BigNumber>;

    claimRewards(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    convertPresaleToReal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createExclusiveNode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNodeAndTransferToPools(
      amount: BigNumberish,
      nodeType: BigNumberish,
      referral_code: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dailyBoost(overrides?: CallOverrides): Promise<BigNumber>;

    dailyReward(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endSellFeeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getNodePrice(
      node_type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfNodes(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferralCode(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialAdditionnalSellFee(overrides?: CallOverrides): Promise<BigNumber>;

    isNodeOwner(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    launchSellFeeTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityFee(overrides?: CallOverrides): Promise<BigNumber>;

    lpPool(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nodeCreationEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    nodeMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodePrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeRewardEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfNodes(overrides?: CallOverrides): Promise<BigNumber>;

    openTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    referral_bonus(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardFee(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    rewardSwapRatio(overrides?: CallOverrides): Promise<BigNumber>;

    sellFee(overrides?: CallOverrides): Promise<BigNumber>;

    setClaimTime(
      newTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIsPool(
      account: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNodeCreation(
      enableNodeCreation: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNodePrice(
      Ice: BigNumberish,
      Earth: BigNumberish,
      Lava: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPresaleToken(
      _presaleToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardPerNode(
      Ice: BigNumberish,
      Earth: BigNumberish,
      Lava: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapTokensAmount(
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

    swapping(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    teamFee(overrides?: CallOverrides): Promise<BigNumber>;

    teamPool(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    traderJoePair(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFee(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryPool(overrides?: CallOverrides): Promise<BigNumber>;

    updateClaimFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLiquidityWallet(
      walletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxTx(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMaxWallet(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMultiswapFee(
      _rewardFee: BigNumberish,
      _treasuryFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _teamFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewardSwapRatio(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewardWallet(
      walletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSellFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTeamyWallet(
      walletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTransferFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTreasuryWallet(
      walletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistUser(
      account: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _isBlacklisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _isWhitelisted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountNodes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addTokensToRewardPool(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistMalicious(
      account: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateRewards(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimAllRewards(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimMinTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimRewards(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    convertPresaleToReal(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createExclusiveNode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNodeAndTransferToPools(
      amount: BigNumberish,
      nodeType: BigNumberish,
      referral_code: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dailyBoost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dailyReward(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endSellFeeTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNodePrice(
      node_type: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfNodes(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferralCode(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialAdditionnalSellFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNodeOwner(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    launchSellFeeTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nodeCreationEnabled(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeMapping(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodePrice(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeRewardEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfNodes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referral_bonus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardSwapRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setClaimTime(
      newTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIsPool(
      account: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNodeCreation(
      enableNodeCreation: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNodePrice(
      Ice: BigNumberish,
      Earth: BigNumberish,
      Lava: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPresaleToken(
      _presaleToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardPerNode(
      Ice: BigNumberish,
      Earth: BigNumberish,
      Lava: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapTokensAmount(
      newVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapping(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    traderJoePair(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateClaimFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLiquidityWallet(
      walletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxTx(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMaxWallet(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMultiswapFee(
      _rewardFee: BigNumberish,
      _treasuryFee: BigNumberish,
      _liquidityFee: BigNumberish,
      _teamFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardSwapRatio(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardWallet(
      walletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSellFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTeamyWallet(
      walletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTransferFee(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTreasuryWallet(
      walletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistUser(
      account: string,
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
